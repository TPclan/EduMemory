[{"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\index.js":"1","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\App.js":"2","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\reportWebVitals.js":"3","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\useWindowSize.js":"4","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Home.js":"5","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Game.js":"6","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\About.js":"7","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Tutorial.js":"8"},{"size":697,"mtime":1611364595825,"results":"9","hashOfConfig":"10"},{"size":2400,"mtime":1611806647951,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1610507872217,"results":"12","hashOfConfig":"10"},{"size":1076,"mtime":1611806647961,"results":"13","hashOfConfig":"10"},{"size":561,"mtime":1612237096919,"results":"14","hashOfConfig":"10"},{"size":9034,"mtime":1612333885715,"results":"15","hashOfConfig":"10"},{"size":1950,"mtime":1612313002043,"results":"16","hashOfConfig":"10"},{"size":1142,"mtime":1612241458343,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1d7gdd5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\index.js",[],["38","39"],"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\App.js",["40"],"import React, { useState } from \"react\";\r\n//Adding Components\r\nimport Home from \"./Components/Home\";\r\nimport Game from \"./Components/Game\";\r\nimport About from \"./Components/About\";\r\nimport Tutorial from \"./Components/Tutorial\";\r\n//Import Styles\r\nimport \"./styles/app.scss\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport useWindowSize from \"./useWindowSize\";\r\n\r\nfunction App() {\r\n  const [pageStatus, setPageStatus] = useState(0);\r\n  const windowSize = useWindowSize();\r\n  return (\r\n    <div className=\"App\">\r\n      <section>\r\n        {(() => {\r\n          switch (pageStatus) {\r\n            case 1:\r\n              return (\r\n                <AnimatePresence exitBeforeEnter>\r\n                  <motion.div\r\n                    exit={{ opacity: 0 }}\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                  >\r\n                    <Game\r\n                      pageStatus={pageStatus}\r\n                      setPageStatus={setPageStatus}\r\n                    />\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              );\r\n            case 2:\r\n              return (\r\n                <AnimatePresence exitBeforeEnter>\r\n                  <motion.div\r\n                    exit={{ opacity: 0 }}\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                  >\r\n                    <Tutorial\r\n                      pageStatus={pageStatus}\r\n                      setPageStatus={setPageStatus}\r\n                    />\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              );\r\n            case 3:\r\n              return (\r\n                <AnimatePresence exitBeforeEnter>\r\n                  <motion.div\r\n                    exit={{ opacity: 0 }}\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                  >\r\n                    <About\r\n                      pageStatus={pageStatus}\r\n                      setPageStatus={setPageStatus}\r\n                    />\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              );\r\n            default:\r\n              return (\r\n                <Home pageStatus={pageStatus} setPageStatus={setPageStatus} />\r\n              );\r\n          }\r\n        })()}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\reportWebVitals.js",[],"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\useWindowSize.js",[],"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Home.js",[],"C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Game.js",["41","42","43","44","45"],"// import React from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated as a } from \"react-spring\";\r\nimport HomeButton from \"../img/home-button.svg\";\r\nimport Background1 from \"../img/cartoon-animals/card-1.png\";\r\nimport Background13 from \"../img/cartoon-animals/card-13.png\";\r\nimport Background3 from \"../img/cartoon-animals/card-3.png\";\r\nimport Background4 from \"../img/cartoon-animals/card-4.png\";\r\nimport Background5 from \"../img/cartoon-animals/card-5.png\";\r\nimport Background6 from \"../img/cartoon-animals/card-6.png\";\r\nimport Background7 from \"../img/cartoon-animals/card-7.png\";\r\nimport Background8 from \"../img/cartoon-animals/card-8.png\";\r\nimport Background9 from \"../img/cartoon-animals/card-9.png\";\r\nimport Background14 from \"../img/cartoon-animals/card-14.png\";\r\nimport Background11 from \"../img/cartoon-animals/card-11.png\";\r\nimport Background12 from \"../img/cartoon-animals/card-12.png\";\r\nimport logo from \"../icons/brain-2.svg\";\r\nimport CountUp from \"react-countup\";\r\nimport { useTapGesture } from \"framer-motion\";\r\nimport CardBack from \"../img/CardBackBlue.png\";\r\n\r\nfunction Game({ setPageStatus, pageStatus, flippedCount }) {\r\n  const [options, setOptions] = useState(null);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  //This will check to see if new score is high score\r\n  useEffect(() => {\r\n    const json = localStorage.getItem(\"memorygamehighscore\");\r\n    const savedScore = JSON.parse(json);\r\n    if (savedScore) {\r\n      setHighScore(savedScore);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`game ${pageStatus ? \"active-game\" : \"\"}`}>\r\n      <div>\r\n        <button onClick={() => setPageStatus(0)} className=\"home-button\">\r\n          <img className=\"home-pic\" src={HomeButton} alt=\"Home Button\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"logo-title-div\">\r\n        <h1 className=\"logo-title\">EduMemory</h1>\r\n        <img className=\"brain-logo\" alt=\"EduMemory logo\" src={logo}></img>\r\n      </div>\r\n\r\n      <h2>Memory Game</h2>\r\n\r\n      <div className=\"container\">\r\n        <div>\r\n          <h4></h4>\r\n        </div>\r\n        <div>\r\n          {options === null ? (\r\n            <h2>Choose a difficulty below to begin!</h2>\r\n          ) : (\r\n            <h2>Pick 2 cards!</h2>\r\n          )}\r\n          {options === null ? (\r\n            <h6> </h6>\r\n          ) : (\r\n            <div className=\"timer\">\r\n              <h2>Time:</h2>\r\n              <CountUp className=\"CountUp1\" end={2000} duration={20000} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"difficulty\">\r\n          {options === null ? (\r\n            <>\r\n              <button onClick={() => setOptions(12)}>Easy</button>\r\n              <button onClick={() => setOptions(18)}>Medium</button>\r\n              <button onClick={() => setOptions(24)}>Hard</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={() => setOptions(null)}>Restart</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {options ? (\r\n        <MemoryGame\r\n          options={options}\r\n          setOptions={setOptions}\r\n          highScore={highScore}\r\n          setHighScore={setHighScore}\r\n        />\r\n      ) : (\r\n        <h2> </h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n//Game Board. Put in another file\r\nfunction MemoryGame({ options, setOptions, highScore, setHighScore }) {\r\n  const [game, setGame] = useState([]);\r\n  const [flippedCount, setFlippedCount] = useState(0);\r\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\r\n\r\n  const colors = [\r\n    `url(${Background1})`,\r\n    `url(${Background13})`,\r\n    `url(${Background3})`,\r\n    `url(${Background4})`,\r\n    `url(${Background5})`,\r\n    `url(${Background6})`,\r\n    `url(${Background7})`,\r\n    `url(${Background8})`,\r\n    `url(${Background9})`,\r\n    `url(${Background14})`,\r\n    `url(${Background11})`,\r\n    `url(${Background12})`,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const newGame = [];\r\n    for (let i = 0; i < options / 2; i++) {\r\n      const firstOption = {\r\n        id: 2 * i,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n      const secondOption = {\r\n        id: 2 * i + 1,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n\r\n      newGame.push(firstOption);\r\n      newGame.push(secondOption);\r\n    }\r\n\r\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\r\n    setGame(shuffledGame);\r\n  }, []);\r\n\r\n  //Section that shows high score. Maybe change later as is a little confusing\r\n  useEffect(() => {\r\n    const finished = !game.some((card) => !card.flipped);\r\n    if (finished && game.length > 0) {\r\n      setTimeout(() => {\r\n        const bestPossible = game.length;\r\n        let multiplier;\r\n\r\n        if (options === 12) {\r\n          multiplier = 5;\r\n        } else if (options === 18) {\r\n          multiplier = 2.5;\r\n        } else if (options === 24) {\r\n          multiplier = 1;\r\n        }\r\n\r\n        const pointsLost = Math.round(\r\n          multiplier * (0.66 * flippedCount - bestPossible)\r\n        );\r\n\r\n        let score;\r\n        if (pointsLost < 100) {\r\n          score = 100 - pointsLost;\r\n        } else {\r\n          score = 0;\r\n        }\r\n        if (score > highScore) {\r\n          setHighScore(score);\r\n          const json = JSON.stringify(score);\r\n          localStorage.setItem(\"memorygamehighscore\", json);\r\n        }\r\n        //Dont need highscore window tight now. Add different score method\r\n        const newGame = window.confirm(\"You Win!, New Game?\");\r\n        if (newGame) {\r\n          const gameLength = game.length;\r\n          setOptions(null);\r\n          setTimeout(() => {\r\n            setOptions(gameLength);\r\n          }, 5);\r\n        } else {\r\n          setOptions(null);\r\n        }\r\n      }, 500);\r\n    }\r\n  }, [game]);\r\n\r\n  // Runs if two cards have been flipped\r\n  if (flippedIndexes.length === 2) {\r\n    const match =\r\n      game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\r\n\r\n    if (match) {\r\n      const newGame = [...game];\r\n      newGame[flippedIndexes[0]].flipped = true;\r\n      newGame[flippedIndexes[1]].flipped = true;\r\n      setGame(newGame);\r\n\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(false);\r\n      setFlippedIndexes(newIndexes);\r\n    } else {\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(true);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  }\r\n\r\n  if (game.length === 0) return <div>loading...</div>;\r\n  else {\r\n    return (\r\n      <div id=\"cards\">\r\n        {game.map((card, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <Card\r\n              id={index}\r\n              color={card.color}\r\n              game={game}\r\n              flippedCount={flippedCount}\r\n              setFlippedCount={setFlippedCount}\r\n              flippedIndexes={flippedIndexes}\r\n              setFlippedIndexes={setFlippedIndexes}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Card setup. should be in a separate file eventually\r\nfunction Card({\r\n  id,\r\n  color,\r\n  game,\r\n  flippedCount,\r\n  setFlippedCount,\r\n  flippedIndexes,\r\n  setFlippedIndexes,\r\n}) {\r\n  const [flipped, set] = useState(false);\r\n  const { transform, opacity } = useSpring({\r\n    opacity: flipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 },\r\n  });\r\n\r\n  //Set timer, then flip the cards back\r\n  useEffect(() => {\r\n    if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\r\n      setTimeout(() => {\r\n        set((state) => !state);\r\n        setFlippedCount(flippedCount + 1);\r\n        setFlippedIndexes([]);\r\n      }, 2000);\r\n    } else if (flippedIndexes[2] === false && id === 0) {\r\n      setFlippedCount(flippedCount + 1);\r\n      setFlippedIndexes([]);\r\n    }\r\n  }, [flippedIndexes]);\r\n\r\n  const onCardClick = () => {\r\n    if (!game[id].flipped && flippedCount % 3 === 0) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    } else if (\r\n      flippedCount % 3 === 1 &&\r\n      !game[id].flipped &&\r\n      flippedIndexes.indexOf(id) < 0\r\n    ) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"hovernow\" onClick={onCardClick}>\r\n      <a.div\r\n        className=\"c back\"\r\n        style={{\r\n          opacity: opacity.interpolate((o) => 1 - o),\r\n          transform,\r\n          backgroundImage: `url(${CardBack})`,\r\n        }}\r\n      />\r\n      <a.div\r\n        className=\"c front\"\r\n        style={{\r\n          opacity,\r\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\r\n          backgroundImage: color,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\About.js",["46","47","48","49","50"],"import React from \"react\";\r\nimport HomeButton from \"../img/home-button.svg\";\r\nimport logo from \"../icons/brain-2.svg\";\r\n\r\nconst About = ({ setPageStatus }) => {\r\n  return (\r\n    <div className=\"about\">\r\n      <div>\r\n        <button className=\"home-button\" onClick={() => setPageStatus(0)}>\r\n          <img className=\"home-pic\" src={HomeButton} alt=\"Home Button\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"logo-title-div\">\r\n        <h1 className=\"logo-title\">EduMemory</h1>\r\n        <img className=\"brain-logo\" alt=\"EduMemory logo\" src={logo}></img>\r\n      </div>\r\n      <div>\r\n        <h2>About My App</h2>\r\n        <p>\r\n          Hello! My name is Tom, and this is my first ever app, <br /> and the\r\n          beginning of the creation of several more in the future! <br /> This\r\n          took a while to make and I hope you enjoy it!\r\n        </p>\r\n        <h2>Credits:</h2>\r\n        <p>\r\n          I used{\" \"}\r\n          <a href=\"https://code.visualstudio.com/\" target=\"_blank\">\r\n            Visual Studio Code\r\n          </a>{\" \"}\r\n          to write my code for this project. <br />I used{\" \"}\r\n          <a href=\"https://github.com\" target=\"_blank\">\r\n            {\" \"}\r\n            GitHub\r\n          </a>{\" \"}\r\n          to store and share my code.\r\n          <br />I used{\" \"}\r\n          <a href=\"https://developedbyed.com/\" target=\"_blank\">\r\n            This Coarse\r\n          </a>{\" \"}\r\n          to help me learn HTML and CSS.\r\n          <br />I used{\" \"}\r\n          <a href=\"https://watchandcode.com/\" target=\"_blank\">\r\n            This Coarse\r\n          </a>{\" \"}\r\n          to help me learn JavaScript. <br />\r\n          <a\r\n            href=\"https://reactjsexample.com/a-simple-memory-game-with-react-js/\"\r\n            target=\"_blank\"\r\n          >\r\n            This\r\n          </a>{\" \"}\r\n          is the memory game that I based mine off of.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","C:\\Users\\tomfa\\Desktop\\Other Stuff\\EduMemory\\EduMemory\\src\\Components\\Tutorial.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":14,"column":9,"nodeType":"57","messageId":"58","endLine":14,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":19,"column":10,"nodeType":"57","messageId":"58","endLine":19,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":51,"column":11,"nodeType":"62","endLine":51,"endColumn":15},{"ruleId":"63","severity":1,"message":"64","line":140,"column":6,"nodeType":"65","endLine":140,"endColumn":8,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":186,"column":6,"nodeType":"65","endLine":186,"endColumn":12,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"69","line":260,"column":6,"nodeType":"65","endLine":260,"endColumn":22,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":27,"column":11,"nodeType":"62","endLine":27,"endColumn":68},{"ruleId":"71","severity":1,"message":"72","line":31,"column":11,"nodeType":"62","endLine":31,"endColumn":56},{"ruleId":"71","severity":1,"message":"72","line":37,"column":11,"nodeType":"62","endLine":37,"endColumn":64},{"ruleId":"71","severity":1,"message":"72","line":42,"column":11,"nodeType":"62","endLine":42,"endColumn":63},{"ruleId":"71","severity":1,"message":"72","line":46,"column":11,"nodeType":"62","endLine":49,"endColumn":12},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'windowSize' is assigned a value but never used.","Identifier","unusedVar","'useTapGesture' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["75"],"React Hook useEffect has missing dependencies: 'flippedCount', 'highScore', 'options', 'setHighScore', and 'setOptions'. Either include them or remove the dependency array. If 'setHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["76"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["77"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [colors, options]",{"range":"84","text":"85"},"Update the dependencies array to be: [flippedCount, game, highScore, options, setHighScore, setOptions]",{"range":"86","text":"87"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"88","text":"89"},[4466,4468],"[colors, options]",[5822,5828],"[flippedCount, game, highScore, options, setHighScore, setOptions]",[7881,7897],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]