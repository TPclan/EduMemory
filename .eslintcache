[{"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\index.js":"1","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\reportWebVitals.js":"2","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\App.js":"3","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Home.js":"4","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Game.js":"5","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Myp.js":"6","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Tutorial.js":"7","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\transition1.js":"8"},{"size":695,"mtime":1610415120585,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1609456599909,"results":"11","hashOfConfig":"10"},{"size":1172,"mtime":1610498089789,"results":"12","hashOfConfig":"10"},{"size":558,"mtime":1610407769098,"results":"13","hashOfConfig":"10"},{"size":8028,"mtime":1610498089792,"results":"14","hashOfConfig":"10"},{"size":652,"mtime":1610498089795,"results":"15","hashOfConfig":"10"},{"size":1077,"mtime":1610498089798,"results":"16","hashOfConfig":"10"},{"size":657,"mtime":1610396371589,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tjygwi",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\index.js",["36"],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\reportWebVitals.js",[],["37","38"],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\App.js",[],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Home.js",[],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Game.js",["39","40","41"],"// import React from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated as a } from \"react-spring\";\r\nimport HomeButton from \"../img/home-button.svg\";\r\n\r\nexport default function Game({ setPageStatus, pageStatus }) {\r\n  const [options, setOptions] = useState(null);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  //This will check to see if new score is high score\r\n  useEffect(() => {\r\n    const json = localStorage.getItem(\"memorygamehighscore\");\r\n    const savedScore = JSON.parse(json);\r\n    if (savedScore) {\r\n      setHighScore(savedScore);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`game ${pageStatus ? \"active-game\" : \"\"}`}>\r\n      <div className=\"home-button\">\r\n        <button onClick={() => setPageStatus(0)} class=\"homeButton\">\r\n          <img className=\"homePic\" src={HomeButton} alt=\"Home Button\" />\r\n        </button>\r\n      </div>\r\n      <h1>EduMemory</h1>\r\n\r\n      <h2>Game</h2>\r\n\r\n      <div className=\"container\">\r\n        <h2>Memory Game</h2>\r\n        <div>\r\n          <h4>High Score: {highScore}</h4>\r\n        </div>\r\n        <div>\r\n          {options === null ? (\r\n            <>\r\n              <button className=\"home-button\" onClick={() => setOptions(12)}>\r\n                Easy\r\n              </button>\r\n              <button className=\"home-button\" onClick={() => setOptions(18)}>\r\n                Medium\r\n              </button>\r\n              <button className=\"home-button\" onClick={() => setOptions(24)}>\r\n                Hard\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button\r\n                className=\"home-button\"\r\n                onClick={() => {\r\n                  const prevOptions = options;\r\n                  setOptions(null);\r\n                  setTimeout(() => {\r\n                    setOptions(prevOptions);\r\n                  }, 5);\r\n                }}\r\n              >\r\n                Start Over\r\n              </button>\r\n              <button className=\"home-button\" onClick={() => setOptions(null)}>\r\n                Main Menu\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {options ? (\r\n        <MemoryGame\r\n          options={options}\r\n          setOptions={setOptions}\r\n          highScore={highScore}\r\n          setHighScore={setHighScore}\r\n        />\r\n      ) : (\r\n        <h2>Choose a difficulty to begin!</h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n//Game Board. Put in another file\r\nfunction MemoryGame({ options, setOptions, highScore, setHighScore }) {\r\n  const [game, setGame] = useState([]);\r\n  const [flippedCount, setFlippedCount] = useState(0);\r\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\r\n\r\n  const colors = [\r\n    \"#ecdb54\",\r\n    \"#e34132\",\r\n    \"#6ca0dc\",\r\n    \"#944743\",\r\n    \"#dbb2d1\",\r\n    \"#ec9787\",\r\n    \"#00a68c\",\r\n    \"#645394\",\r\n    \"#6c4f3d\",\r\n    \"#ebe1df\",\r\n    \"#bc6ca7\",\r\n    \"#bfd833\",\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const newGame = [];\r\n    for (let i = 0; i < options / 2; i++) {\r\n      const firstOption = {\r\n        id: 2 * i,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n      const secondOption = {\r\n        id: 2 * i + 1,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n\r\n      newGame.push(firstOption);\r\n      newGame.push(secondOption);\r\n    }\r\n\r\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\r\n    setGame(shuffledGame);\r\n  }, []);\r\n\r\n  //Section that shows high score. Maybe change later as is a little confusing\r\n  useEffect(() => {\r\n    const finished = !game.some((card) => !card.flipped);\r\n    if (finished && game.length > 0) {\r\n      setTimeout(() => {\r\n        const bestPossible = game.length;\r\n        let multiplier;\r\n\r\n        if (options === 12) {\r\n          multiplier = 5;\r\n        } else if (options === 18) {\r\n          multiplier = 2.5;\r\n        } else if (options === 24) {\r\n          multiplier = 1;\r\n        }\r\n\r\n        const pointsLost = multiplier * (0.66 * flippedCount - bestPossible);\r\n\r\n        let score;\r\n        if (pointsLost < 100) {\r\n          score = 100 - pointsLost;\r\n        } else {\r\n          score = 0;\r\n        }\r\n\r\n        if (score > highScore) {\r\n          setHighScore(score);\r\n          const json = JSON.stringify(score);\r\n          localStorage.setItem(\"memorygamehighscore\", json);\r\n        }\r\n        //was getting error \"Unexpected use of 'confirm' no-restricted-globals\". Just needed to add \"window.\"below\r\n        const newGame = window.confirm(\r\n          \"You Win!, SCORE: \" + score + \" New Game?\"\r\n        );\r\n        if (newGame) {\r\n          const gameLength = game.length;\r\n          setOptions(null);\r\n          setTimeout(() => {\r\n            setOptions(gameLength);\r\n          }, 5);\r\n        } else {\r\n          setOptions(null);\r\n        }\r\n      }, 500);\r\n    }\r\n  }, [game]);\r\n\r\n  // Runs if two cards have been flipped\r\n  if (flippedIndexes.length === 2) {\r\n    const match =\r\n      game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\r\n\r\n    if (match) {\r\n      const newGame = [...game];\r\n      newGame[flippedIndexes[0]].flipped = true;\r\n      newGame[flippedIndexes[1]].flipped = true;\r\n      setGame(newGame);\r\n\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(false);\r\n      setFlippedIndexes(newIndexes);\r\n    } else {\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(true);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  }\r\n\r\n  if (game.length === 0) return <div>loading...</div>;\r\n  else {\r\n    return (\r\n      <div id=\"cards\">\r\n        {game.map((card, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <Card\r\n              id={index}\r\n              color={card.color}\r\n              game={game}\r\n              flippedCount={flippedCount}\r\n              setFlippedCount={setFlippedCount}\r\n              flippedIndexes={flippedIndexes}\r\n              setFlippedIndexes={setFlippedIndexes}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Card setup. should be in a separate file eventually\r\nfunction Card({\r\n  id,\r\n  color,\r\n  game,\r\n  flippedCount,\r\n  setFlippedCount,\r\n  flippedIndexes,\r\n  setFlippedIndexes,\r\n}) {\r\n  const [flipped, set] = useState(false);\r\n  const { transform, opacity } = useSpring({\r\n    opacity: flipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 },\r\n  });\r\n\r\n  //Set timer, then flip the cards back\r\n  useEffect(() => {\r\n    if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\r\n      setTimeout(() => {\r\n        set((state) => !state);\r\n        setFlippedCount(flippedCount + 1);\r\n        setFlippedIndexes([]);\r\n      }, 1000);\r\n    } else if (flippedIndexes[2] === false && id === 0) {\r\n      setFlippedCount(flippedCount + 1);\r\n      setFlippedIndexes([]);\r\n    }\r\n  }, [flippedIndexes]);\r\n\r\n  const onCardClick = () => {\r\n    if (!game[id].flipped && flippedCount % 3 === 0) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    } else if (\r\n      flippedCount % 3 === 1 &&\r\n      !game[id].flipped &&\r\n      flippedIndexes.indexOf(id) < 0\r\n    ) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={onCardClick}>\r\n      <a.div\r\n        className=\"c back\"\r\n        style={{\r\n          opacity: opacity.interpolate((o) => 1 - o),\r\n          transform,\r\n        }}\r\n      />\r\n      <a.div\r\n        className=\"c front\"\r\n        style={{\r\n          opacity,\r\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\r\n          background: color,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default Game;\r\n","C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Myp.js",[],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\Tutorial.js",[],"C:\\GDrive Optipath\\Projects\\React\\EduMemory\\EduMemory\\src\\Components\\transition1.js",[],{"ruleId":"42","severity":1,"message":"43","line":5,"column":8,"nodeType":"44","messageId":"45","endLine":5,"endColumn":12},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":121,"column":6,"nodeType":"52","endLine":121,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":168,"column":6,"nodeType":"52","endLine":168,"endColumn":12,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":242,"column":6,"nodeType":"52","endLine":242,"endColumn":22,"suggestions":"57"},"no-unused-vars","'Fade' is defined but never used.","Identifier","unusedVar","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'flippedCount', 'highScore', 'options', 'setHighScore', and 'setOptions'. Either include them or remove the dependency array. If 'setHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["61"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [colors, options]",{"range":"69","text":"70"},"Update the dependencies array to be: [flippedCount, game, highScore, options, setHighScore, setOptions]",{"range":"71","text":"72"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"73","text":"74"},[3291,3293],"[colors, options]",[4698,4704],"[flippedCount, game, highScore, options, setHighScore, setOptions]",[6757,6773],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]