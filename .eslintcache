[{"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\index.js":"1","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\reportWebVitals.js":"2","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\App.js":"3","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Home.js":"4","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Tutorial.js":"5","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Game.js":"6","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\About.js":"7"},{"size":673,"mtime":1611111405000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611111405000,"results":"10","hashOfConfig":"9"},{"size":1614,"mtime":1611119353393,"results":"11","hashOfConfig":"9"},{"size":557,"mtime":1611111405000,"results":"12","hashOfConfig":"9"},{"size":1130,"mtime":1611274217703,"results":"13","hashOfConfig":"9"},{"size":8358,"mtime":1611111405000,"results":"14","hashOfConfig":"9"},{"size":738,"mtime":1611274191295,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"mvey4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\index.js",[],["32","33"],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\reportWebVitals.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\App.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Home.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Tutorial.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Game.js",["34","35","36","37","38"],"// import React from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated as a } from \"react-spring\";\nimport HomeButton from \"../img/home-button.svg\";\nimport Background1 from \"../img/cartoon-animals/card-1.png\";\nimport Background13 from \"../img/cartoon-animals/card-13.png\";\nimport Background3 from \"../img/cartoon-animals/card-3.png\";\nimport Background4 from \"../img/cartoon-animals/card-4.png\";\nimport Background5 from \"../img/cartoon-animals/card-5.png\";\nimport Background6 from \"../img/cartoon-animals/card-6.png\";\nimport Background7 from \"../img/cartoon-animals/card-7.png\";\nimport Background8 from \"../img/cartoon-animals/card-8.png\";\nimport Background9 from \"../img/cartoon-animals/card-9.png\";\nimport Background14 from \"../img/cartoon-animals/card-14.png\";\nimport Background11 from \"../img/cartoon-animals/card-11.png\";\nimport Background12 from \"../img/cartoon-animals/card-12.png\";\nimport logo from \"../icons/brain-2.svg\";\n\nexport default function Game({ setPageStatus, pageStatus }) {\n  const [options, setOptions] = useState(null);\n  const [highScore, setHighScore] = useState(0);\n\n  //This will check to see if new score is high score\n  useEffect(() => {\n    const json = localStorage.getItem(\"memorygamehighscore\");\n    const savedScore = JSON.parse(json);\n    if (savedScore) {\n      setHighScore(savedScore);\n    }\n  }, []);\n\n  return (\n    <div className={`game ${pageStatus ? \"active-game\" : \"\"}`}>\n      <div>\n        <button onClick={() => setPageStatus(0)} className=\"home-button\">\n          <img className=\"home-pic\" src={HomeButton} alt=\"Home Button\" />\n        </button>\n      </div>\n      <div className=\"logo-title-div\">\n        <h1 className=\"logo-title\">EduMemory</h1>\n        <img className=\"brain-logo\" alt=\"EduMemory logo\" src={logo}></img>\n      </div>\n\n      <h2>Memory Game</h2>\n\n      <div className=\"container\">\n        <div>\n          <h4>High Score: {highScore}</h4>\n        </div>\n        <div>\n          {options === null ? (\n            <h2>Choose a difficulty below to begin!</h2>\n          ) : (\n            <h2></h2>\n          )}\n        </div>\n        <div>\n          {options === null ? (\n            <>\n              <button onClick={() => setOptions(12)}>Easy</button>\n              <button onClick={() => setOptions(18)}>Medium</button>\n              <button onClick={() => setOptions(24)}>Hard</button>\n            </>\n          ) : (\n            <>\n              <button onClick={() => setOptions(null)}>Restart</button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {options ? (\n        <MemoryGame\n          options={options}\n          setOptions={setOptions}\n          highScore={highScore}\n          setHighScore={setHighScore}\n        />\n      ) : (\n        <h2></h2>\n      )}\n    </div>\n  );\n}\n\n//Game Board. Put in another file\nfunction MemoryGame({ options, setOptions, highScore, setHighScore }) {\n  const [game, setGame] = useState([]);\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n\n  const colors = [\n    `url(${Background1})`,\n    `url(${Background13})`,\n    `url(${Background3})`,\n    `url(${Background4})`,\n    `url(${Background5})`,\n    `url(${Background6})`,\n    `url(${Background7})`,\n    `url(${Background8})`,\n    `url(${Background9})`,\n    `url(${Background14})`,\n    `url(${Background11})`,\n    `url(${Background12})`,\n  ];\n\n  useEffect(() => {\n    const newGame = [];\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: 2 * i,\n        colorId: i,\n        color: colors[i],\n        flipped: false,\n      };\n      const secondOption = {\n        id: 2 * i + 1,\n        colorId: i,\n        color: colors[i],\n        flipped: false,\n      };\n\n      newGame.push(firstOption);\n      newGame.push(secondOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    setGame(shuffledGame);\n  }, []);\n\n  //Section that shows high score. Maybe change later as is a little confusing\n  useEffect(() => {\n    const finished = !game.some((card) => !card.flipped);\n    if (finished && game.length > 0) {\n      setTimeout(() => {\n        const bestPossible = game.length;\n        let multiplier;\n\n        if (options === 12) {\n          multiplier = 5;\n        } else if (options === 18) {\n          multiplier = 2.5;\n        } else if (options === 24) {\n          multiplier = 1;\n        }\n\n        const pointsLost = Math.round(\n          multiplier * (0.66 * flippedCount - bestPossible)\n        );\n\n        let score;\n        if (pointsLost < 100) {\n          score = 100 - pointsLost;\n        } else {\n          score = 0;\n        }\n\n        if (score > highScore) {\n          setHighScore(score);\n          const json = JSON.stringify(score);\n          localStorage.setItem(\"memorygamehighscore\", json);\n        }\n        //was getting error \"Unexpected use of 'confirm' no-restricted-globals\". Just needed to add \"window.\"below\n        const newGame = window.confirm(\n          \"You Win!, SCORE: \" + score + \" New Game?\"\n        );\n        if (newGame) {\n          const gameLength = game.length;\n          setOptions(null);\n          setTimeout(() => {\n            setOptions(gameLength);\n          }, 5);\n        } else {\n          setOptions(null);\n        }\n      }, 500);\n    }\n  }, [game]);\n\n  // Runs if two cards have been flipped\n  if (flippedIndexes.length === 2) {\n    const match =\n      game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\n\n    if (match) {\n      const newGame = [...game];\n      newGame[flippedIndexes[0]].flipped = true;\n      newGame[flippedIndexes[1]].flipped = true;\n      setGame(newGame);\n\n      const newIndexes = [...flippedIndexes];\n      newIndexes.push(false);\n      setFlippedIndexes(newIndexes);\n    } else {\n      const newIndexes = [...flippedIndexes];\n      newIndexes.push(true);\n      setFlippedIndexes(newIndexes);\n    }\n  }\n\n  if (game.length === 0) return <div>loading...</div>;\n  else {\n    return (\n      <div id=\"cards\">\n        {game.map((card, index) => (\n          <div className=\"card\" key={index}>\n            <Card\n              id={index}\n              color={card.color}\n              game={game}\n              flippedCount={flippedCount}\n              setFlippedCount={setFlippedCount}\n              flippedIndexes={flippedIndexes}\n              setFlippedIndexes={setFlippedIndexes}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\n//Card setup. should be in a separate file eventually\nfunction Card({\n  id,\n  color,\n  game,\n  flippedCount,\n  setFlippedCount,\n  flippedIndexes,\n  setFlippedIndexes,\n}) {\n  const [flipped, set] = useState(false);\n  const { transform, opacity } = useSpring({\n    opacity: flipped ? 1 : 0,\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 },\n  });\n\n  //Set timer, then flip the cards back\n  useEffect(() => {\n    if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\n      setTimeout(() => {\n        set((state) => !state);\n        setFlippedCount(flippedCount + 1);\n        setFlippedIndexes([]);\n      }, 1000);\n    } else if (flippedIndexes[2] === false && id === 0) {\n      setFlippedCount(flippedCount + 1);\n      setFlippedIndexes([]);\n    }\n  }, [flippedIndexes]);\n\n  const onCardClick = () => {\n    if (!game[id].flipped && flippedCount % 3 === 0) {\n      set((state) => !state);\n      setFlippedCount(flippedCount + 1);\n      const newIndexes = [...flippedIndexes];\n      newIndexes.push(id);\n      setFlippedIndexes(newIndexes);\n    } else if (\n      flippedCount % 3 === 1 &&\n      !game[id].flipped &&\n      flippedIndexes.indexOf(id) < 0\n    ) {\n      set((state) => !state);\n      setFlippedCount(flippedCount + 1);\n      const newIndexes = [...flippedIndexes];\n      newIndexes.push(id);\n      setFlippedIndexes(newIndexes);\n    }\n  };\n\n  return (\n    <div onClick={onCardClick}>\n      <a.div\n        className=\"c back\"\n        style={{\n          opacity: opacity.interpolate((o) => 1 - o),\n          transform,\n        }}\n      />\n      <a.div\n        className=\"c front\"\n        style={{\n          opacity,\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\n          backgroundImage: color,\n        }}\n      />\n    </div>\n  );\n}\n\n//export default Game;\n","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\About.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":54,"column":13,"nodeType":"45","endLine":54,"endColumn":17},{"ruleId":"43","severity":1,"message":"44","line":80,"column":9,"nodeType":"45","endLine":80,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":129,"column":6,"nodeType":"48","endLine":129,"endColumn":8,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":178,"column":6,"nodeType":"48","endLine":178,"endColumn":12,"suggestions":"51"},{"ruleId":"46","severity":1,"message":"52","line":252,"column":6,"nodeType":"48","endLine":252,"endColumn":22,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has missing dependencies: 'flippedCount', 'highScore', 'options', 'setHighScore', and 'setOptions'. Either include them or remove the dependency array. If 'setHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["57"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [colors, options]",{"range":"65","text":"66"},"Update the dependencies array to be: [flippedCount, game, highScore, options, setHighScore, setOptions]",{"range":"67","text":"68"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"69","text":"70"},[3939,3941],"[colors, options]",[5331,5337],"[flippedCount, game, highScore, options, setHighScore, setOptions]",[7316,7332],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]