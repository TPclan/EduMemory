[{"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\index.js":"1","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\reportWebVitals.js":"2","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\App.js":"3","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Tutorial.js":"4","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Home.js":"5","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\About.js":"6","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Game.js":"7","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\useWindowSize.js":"8"},{"size":673,"mtime":1611111405000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1611111405000,"results":"11","hashOfConfig":"10"},{"size":2484,"mtime":1612403776203,"results":"12","hashOfConfig":"10"},{"size":1142,"mtime":1612403776210,"results":"13","hashOfConfig":"10"},{"size":561,"mtime":1612403776208,"results":"14","hashOfConfig":"10"},{"size":1950,"mtime":1612403776205,"results":"15","hashOfConfig":"10"},{"size":9110,"mtime":1612403776207,"results":"16","hashOfConfig":"10"},{"size":1076,"mtime":1611709241923,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mvey4",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\index.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\reportWebVitals.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\App.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Tutorial.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Home.js",[],["36","37"],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\About.js",[],"C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\Components\\Game.js",["38","39","40","41"],"// import React from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated as a } from \"react-spring\";\r\nimport HomeButton from \"../img/home-button.svg\";\r\nimport Background1 from \"../img/cartoon-animals/card-1.png\";\r\nimport Background13 from \"../img/cartoon-animals/card-13.png\";\r\nimport Background3 from \"../img/cartoon-animals/card-3.png\";\r\nimport Background4 from \"../img/cartoon-animals/card-4.png\";\r\nimport Background5 from \"../img/cartoon-animals/card-5.png\";\r\nimport Background6 from \"../img/cartoon-animals/card-6.png\";\r\nimport Background7 from \"../img/cartoon-animals/card-7.png\";\r\nimport Background8 from \"../img/cartoon-animals/card-8.png\";\r\nimport Background9 from \"../img/cartoon-animals/card-9.png\";\r\nimport Background14 from \"../img/cartoon-animals/card-14.png\";\r\nimport Background11 from \"../img/cartoon-animals/card-11.png\";\r\nimport Background12 from \"../img/cartoon-animals/card-12.png\";\r\nimport logo from \"../icons/brain-2.svg\";\r\nimport CountUp from \"react-countup\";\r\n//import { useTapGesture } from \"framer-motion\";\r\nimport CardBack from \"../img/CardBackBlue.png\";\r\n\r\nfunction Game({ setPageStatus, pageStatus, flippedCount }) {\r\n  const [options, setOptions] = useState(null);\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  //This will check to see if new score is high score\r\n  useEffect(() => {\r\n    const json = localStorage.getItem(\"memorygamehighscore\");\r\n    const savedScore = JSON.parse(json);\r\n    if (savedScore) {\r\n      setHighScore(savedScore);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`game ${pageStatus ? \"active-game\" : \"\"}`}>\r\n      <div>\r\n        <button className=\"home-button\" onClick={() => setPageStatus(0)}>\r\n          <img className=\"home-pic\" src={HomeButton} alt=\"Home Button\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"logo-title-div\">\r\n        <h1 className=\"logo-title\">EduMemory</h1>\r\n        <img className=\"brain-logo\" alt=\"EduMemory logo\" src={logo}></img>\r\n      </div>\r\n\r\n      <h2>Memory Game</h2>\r\n\r\n      <div className=\"container\">\r\n        <div>\r\n          {options === null ? (\r\n            <h2>Choose a difficulty below to begin!</h2>\r\n          ) : (\r\n            <h2>Pick 2 cards!</h2>\r\n          )}\r\n          {options === null ? (\r\n            <h6> </h6>\r\n          ) : (\r\n            <div className=\"timer\">\r\n              <h2>Time:</h2>\r\n              <CountUp className=\"CountUp1\" end={2000} duration={20000} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"difficulty\">\r\n          {options === null ? (\r\n            <>\r\n              <button onClick={() => setOptions(12)}>Easy</button>\r\n              <button onClick={() => setOptions(18)}>Medium</button>\r\n              <button onClick={() => setOptions(24)}>Hard</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={() => setOptions(null)}>Restart</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {options ? (\r\n        <MemoryGame\r\n          options={options}\r\n          setOptions={setOptions}\r\n          highScore={highScore}\r\n          setHighScore={setHighScore}\r\n        />\r\n      ) : (\r\n        <h2> </h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n//Game Board\r\nfunction MemoryGame({ options, setOptions, highScore, setHighScore }) {\r\n  const [game, setGame] = useState([]);\r\n  const [flippedCount, setFlippedCount] = useState(0);\r\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const colors = [\r\n      `url(${Background1})`,\r\n      `url(${Background13})`,\r\n      `url(${Background3})`,\r\n      `url(${Background4})`,\r\n      `url(${Background5})`,\r\n      `url(${Background6})`,\r\n      `url(${Background7})`,\r\n      `url(${Background8})`,\r\n      `url(${Background9})`,\r\n      `url(${Background14})`,\r\n      `url(${Background11})`,\r\n      `url(${Background12})`,\r\n    ];\r\n    const newGame = [];\r\n    for (let i = 0; i < options / 2; i++) {\r\n      const firstOption = {\r\n        id: 2 * i,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n      const secondOption = {\r\n        id: 2 * i + 1,\r\n        colorId: i,\r\n        color: colors[i],\r\n        flipped: false,\r\n      };\r\n\r\n      newGame.push(firstOption);\r\n      newGame.push(secondOption);\r\n    }\r\n\r\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\r\n    setGame(shuffledGame);\r\n  }, [options]);\r\n\r\n  //Section that shows high score. Maybe change later as is a little confusing\r\n  useEffect(() => {\r\n    const finished = !game.some((card) => !card.flipped);\r\n    if (finished && game.length > 0) {\r\n      setTimeout(() => {\r\n        const bestPossible = game.length;\r\n        let multiplier;\r\n\r\n        if (options === 12) {\r\n          multiplier = 5;\r\n        } else if (options === 18) {\r\n          multiplier = 2.5;\r\n        } else if (options === 24) {\r\n          multiplier = 1;\r\n        }\r\n\r\n        const pointsLost = Math.round(\r\n          multiplier * (0.66 * flippedCount - bestPossible)\r\n        );\r\n\r\n        let score;\r\n        if (pointsLost < 100) {\r\n          score = 100 - pointsLost;\r\n        } else {\r\n          score = 0;\r\n        }\r\n        if (score > highScore) {\r\n          setHighScore(score);\r\n          const json = JSON.stringify(score);\r\n          localStorage.setItem(\"memorygamehighscore\", json);\r\n        }\r\n        //Dont need highscore window tight now. Add different score method\r\n        const newGame = window.confirm(\"You Win!, New Game?\");\r\n        if (newGame) {\r\n          const gameLength = game.length;\r\n          setOptions(null);\r\n          setTimeout(() => {\r\n            setOptions(gameLength);\r\n          }, 5);\r\n        } else {\r\n          setOptions(null);\r\n        }\r\n      }, 500);\r\n    }\r\n  }, [game, flippedCount, highScore, options, setHighScore, setOptions]);\r\n\r\n  // Runs if two cards have been flipped\r\n  if (flippedIndexes.length === 2) {\r\n    const match =\r\n      game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\r\n\r\n    if (match) {\r\n      const newGame = [...game];\r\n      newGame[flippedIndexes[0]].flipped = true;\r\n      newGame[flippedIndexes[1]].flipped = true;\r\n      setGame(newGame);\r\n\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(false);\r\n      setFlippedIndexes(newIndexes);\r\n    } else {\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(true);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  }\r\n\r\n  if (game.length === 0) return <div>loading...</div>;\r\n  else {\r\n    return (\r\n      <div id=\"cards\">\r\n        {game.map((card, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <Card\r\n              id={index}\r\n              color={card.color}\r\n              game={game}\r\n              flippedCount={flippedCount}\r\n              setFlippedCount={setFlippedCount}\r\n              flippedIndexes={flippedIndexes}\r\n              setFlippedIndexes={setFlippedIndexes}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Card setup. should be in a separate file eventually\r\nfunction Card({\r\n  id,\r\n  color,\r\n  game,\r\n  flippedCount,\r\n  setFlippedCount,\r\n  flippedIndexes,\r\n  setFlippedIndexes,\r\n}) {\r\n  const [flipped, set] = useState(false);\r\n  const { transform, opacity } = useSpring({\r\n    opacity: flipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 },\r\n  });\r\n\r\n  //Set timer, then flip the cards back\r\n  useEffect(() => {\r\n    if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\r\n      setTimeout(() => {\r\n        set((state) => !state);\r\n        setFlippedCount(flippedCount + 1);\r\n        setFlippedIndexes([]);\r\n      }, 1800);\r\n    } else if (flippedIndexes[2] === false && id === 0) {\r\n      setFlippedCount(flippedCount + 1);\r\n      setFlippedIndexes([]);\r\n    }\r\n  }, [flippedIndexes, flippedCount, id, setFlippedCount, setFlippedIndexes]);\r\n\r\n  const onCardClick = () => {\r\n    if (!game[id].flipped && flippedCount % 3 === 0) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    } else if (\r\n      flippedCount % 3 === 1 &&\r\n      !game[id].flipped &&\r\n      flippedIndexes.indexOf(id) < 0\r\n    ) {\r\n      set((state) => !state);\r\n      setFlippedCount(flippedCount + 1);\r\n      const newIndexes = [...flippedIndexes];\r\n      newIndexes.push(id);\r\n      setFlippedIndexes(newIndexes);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"hovernow\" onClick={onCardClick}>\r\n      <a.div\r\n        className=\"c back\"\r\n        style={{\r\n          opacity: opacity.interpolate((o) => 1 - o),\r\n          transform,\r\n          backgroundImage: `url(${CardBack})`,\r\n        }}\r\n      />\r\n      <a.div\r\n        className=\"c front\"\r\n        style={{\r\n          opacity,\r\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\r\n          backgroundImage: color,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\Users\\tomfa\\OneDrive\\Desktop\\EduMemory Fork\\EduMemory\\src\\useWindowSize.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":18,"column":10,"nodeType":"48","messageId":"49","endLine":18,"endColumn":23},{"ruleId":"50","severity":1,"message":"51","line":139,"column":6,"nodeType":"52","endLine":139,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":188,"column":6,"nodeType":"52","endLine":188,"endColumn":12,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":262,"column":6,"nodeType":"52","endLine":262,"endColumn":22,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'useTapGesture' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'flippedCount', 'highScore', 'options', 'setHighScore', and 'setOptions'. Either include them or remove the dependency array. If 'setHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["61"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [colors, options]",{"range":"69","text":"70"},"Update the dependencies array to be: [flippedCount, game, highScore, options, setHighScore, setOptions]",{"range":"71","text":"72"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"73","text":"74"},[4279,4281],"[colors, options]",[5671,5677],"[flippedCount, game, highScore, options, setHighScore, setOptions]",[7656,7672],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]